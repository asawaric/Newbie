[AccessingDictionaries]
statement:  Which are legitimate ways of accessing the Python dictionary below?
            my_d={1:'a', 2:'b', 3:'c'}
1:my_d[0]::False
2:my_d['a']::False
3:my_d('1')::False
4:my_d['1']::False
5:my_d[1]::True

[IllegalListOperations]
statement: Given the following Python definitions 
            x0 = [1,2,3] 
            x1 = [3,4,5]
            which of the following list operations are allowed in Python?
1:x0 + x1::True
2:x0 - x1::False
3:x1 * x1::False
4:x0 / x0::False
5:x1 * 10::True

[PythonCalculator]
statement:  Assume x = 5 and y = 4
            What is the result of following operations?
            [x**y, x*y]
1:[544, 54]::False
2:[625, 20]::True
3:[20, 625]::False
4:[45, 455]::False
5:[20, 20]::False

[PythonCalculator2]
statement:  Assume x = 5.0 and y = 4.0
            What is the result of following operations?
            [x+y, x-y]
1:[9.0, 1.0]::True
2:[9, 1]::False
3:0.9 and 0.1::False
4:[9] and [1]::False
5:[9.0] and [1.0]::False

[PythonCalculator3]
statement:  Assume x = 5 and y = 4
            What is the result of following operations?
            [x+y, x-y]
1:[9.0, 1.0]::False
2:[9, 1]::True
3:[0.9, 0.1]::False
4:[[9], [1]]::False
5:[[9.0], [1.0]]::False

[PythonCalculator4]
statement:  Assume x = 5.0 and y = 4.0
            What is the result of following operations?
            [x//y, x%y]
1:[1.0, 1.0]::True
2:[1.25, 0]::False
3:[0, 1.25]::False
4:[1, 1]::False
5:[0.8, 0]::False  

[PythonCalculator5]
statement: Assume x = 5 and y = 4
           What is the result of following operations?
           [x//y, x%y]
1:[1.0, 1.0]::False
2:[1.25, 0]::False
3:[0, 1.25]::False
4:[1, 1]::True
5:[0.8, 0]::False


[PythonCalculator6]
statement: Assume x = 5.0 and y = 4.0
           What is the result of following operations?
           [x/y]
1:[1.25]::True
2:[1]::False
3:[0.8]::False
4:[1.0]::False
5:1::False

[PythonCalculator7]
statement:  Assume x = 5 and y = 4
            What is the result of following operations?
            [x/y]
1:[1.25]::False
2:1::False
3:[1.0]::False
4:[1]::True

[PythonCalculator8]
statement:  Assume x = 5.0 and y = 4.0
            What is the result of following operations?
            [x**y, x*y]
1:[544, 54]::False
2:[625.0, 20.0]::True
3:[625, 20]::False
4:[20, 625]:: False
5:[20.0, 20.0]:: False

[Persistence]
statement:  What is the result of the following?
            >>> x0 = 12
            >>> y0 = x0 + 1
            >>> x0 += 1
            >>> z0 = x0 + 1
            >>> print [y0, z0]
1:13 and 14::False
2:[13, 14]::True
3:13, 13::False
4:13, 14::False
5:[14, 14]::False

[ValidLists] 
statement:  Which of the following are legitimate Python lists?
1:['at', 'the', ['library']]::True
2:('at', 'the', 'library')::False
3:[1250, 3412, 6225, 4525]::True
4:{'a', 'b', 'c', 'd'}::False
5:['a', 'b', 'c', 'd']::True 

[AccessListVariable]
statement:  Let lst = [[4,2], [['a', ['answer']], 3, 4]]",
	    How do you access the answer variable in this lst?"
1:lst[1[0]]::False
2:lst[1[0[1]]]::False
3:lst[1][0][1]::True
4:[1][0][1]::False
5:lst(1(0(1)))::False

[ValidListOperations]
statement:  Assume x = ['a', 'b'] and y = ['c', 'd', 'e']
	    Which operations are allowed in Python?
	    [x+y, x-y, x*y, x**y, x/y, x//y, x%y]
1:all the above::False
2:only x+y::True
3:x+y and x*y::False
4:only x*y::False
5:None of the above::False

[ValidStringOperations]
statement:  x = 'hello' and y = 'world'
	    Which operations are allowed in Python?
	    [x+y, x-y, x*y, x**y, x/y, x//y, x%y]
1:none of the above::False
2:only x*y::False
3:only x+y::True
4:all the above::False
5:x+y, x-y and x//y::False

[ValidTupleOperations]
statement:  Assume x = ('a', 'b') and y = ('c',)
	    Which of the following operations are allowed in Python?
	    [x+y, x-y, x*y, x**y, x/y, x//y, x%y]
1:None of the above::False
2:x+y and x**y::False
3:only x*y::False
4:x+y and x*y::False
5:only x+y::True

[TupleAddition]
statement:  What is the result of the following?
            >>> (x,y,) = (100,200)
            >>> print x+y
1:300::True
2:(300)::False
3:[300]::False
4:(x)+(y)::False
5:set([300])::False

[AccessTupleVariable]
statement:  Let lst = ((4,2), (('a', ('answer')), 3, 4))
            How do you access the answer variable in this tuple?
1:lst[1][0][1]::True
2:lst[-1][-3][-1]::True
3:lst[1]::False
4:lst(1)::False

[ValidAddition]
statement:  Assume x = ('a', 'b',)
            Which is the correct way of adding 'c' to this tuple?
1:(x, 'c')::False
2:x = x + ('c',)::True
3:x += 'c',::True
4:(x)+(c)::False
5:x + 'c'::False
                            
[RemovingTupleItems]
statement:  Assume x = ('a', 'b', 'c') 
            Which is the correct way of removing 'c' from this tuple?
1:'Tuples are immutable, hence it doesn't support removing and deletion of an item'::True
2:x.remove('c')::False
3:del(x[c])::False
4:x-('c',)::False
5:x -= 'c'::False

[SetOperations]
statement:  Assume x = set(['a', 'b']) and y = set(['a', 'd', 'e'])
            What is the output of the following?
            >>>print [x+y, x-y, y-x]
1:TypeError-unsupported operand type(s) for +: 'set' and 'set"::True
2:set(['b'])::False
3:set(['e', 'd'])::False
4:{b} and {d,e}::False
5:['b'],['d','e']::False

[RemovingDuplicates]
statement:  Which of the following Python code can remove duplicates from the list?
            lst = [1,2,1,2,3,4,2,1,1]
1:lst.remove(1) and lst.remove(2)::False
2:del(lst[1]) and del(lst[2])::False
3:lst.remove(1,2)::False
4:set[lst]::False
5:set(lst)::True

[RemovingSetItem]
statement:  Let y = set(['a', 'd', 'e'])
            How do you remove 'a' from y?
1:y.remove('a')::True
2:y.discard('a')::True
3:del('a')::False
4:y = y[1:]::True
5:del(y[0])::False

[CreatingDictionary]
statement:  Which of the following are correct ways of creating a dictionary? 
1:d = {}::True
2:dict([("age", 25)])::True
3:dict(Grapes = 1000, Apple = 100, Melon = 10)::True
4:dict{[("age", 25)]}::False
5:dict([])::True

[PrintDictionaryValue]
statement:  Let d = {'correct':1, 'incorrect':'answer'}
	    How do you print the 'answer' string in this Python dictionary?
1:d["incorrect"]::True
2:d.values("incorrect")::False
3:d.values{1}::False
4:d{'answer'}::False
5:'answer' in d.values()::False 

[DictionaryOperations]
statement:  Let d0 = {'a':1, 'b':2} and d1 = {'a':3, 'c':10}
            Which of the following Python operations are supported?
            d0+d1, d1*d1, d0-d1
1:d0+d1::False
2:d0-d1::False
3:d0*d1::False
4:all of the above::False
5:None of the above::True

[ValidDictionaryAddition]
statement:  Let d0 = {'a':1, 'b':2} 
            Which of these are legitimate ways of adding the following key,value {'d':3}?
1:d0{'d'= 3}::False
2:d0['d'] = 3::True
3:d0.update({'d':3})::True
4:d0.add{d:3}::False
5:d0.append('d':3)::False

[PrintUpdatedValue]
statement:  What is the output of the following?
           >>> d0 = {'a': 10, 'b':100}
           >>> d0.update({'a': 1000, 'c':10})
           >>> print d0['a']?
1:a = 1000::False
2:1000::True
3:10::False
4:a = 10::False
5:[1000]::False

[PrintDictionaryItems]
statement:  What is the output of the following?
            >>> d0 = {'a': 10, 'b':100}
            >>> print d0.items()
1:[('a', 10), ('b', 100)]::True
2:(('a', 10), ('b', 100))::False
3:[[a=10],[b=100]]::False
4:{a=10, b=100}::False
5:{a,b,10,100}::False 

[Range]
statement:  Which of the following Python code will produce the following output?
            [2, 4, 6, 8, 10]
1:range(2,11,2)::True
2:range(10,0,-2)::False
3:range(2,12,2)::True
4:range[2,2,10]::False
5:range(2,2,10)::False

[ForLoopMystry1]
statement:  Which is the correct answer to the MYSTERY LINE below?
           >>>lst = ["apple", 1, 4.]
           >>> MYSTERY LINE 
           >>>     print elem
           >>> "apple"
           >>> 1
           >>> 4.0
1:"for elem in lst:"::True
2:elem = '\n'.join(lst)::False
3:"for n, elem in enumerate(lst):"::True
4:"for n, elem in zip(lst, lst):"::True
5:None of the above::False

[ForLoopMystry2]
statement:  Which is the correct answer to the MYSTERY LINE below?
            >>> lst = range(5)
            >>> MYSTERY LINE
            >>>     print n + elem
            >>> 0
            >>> 2
            >>> 4
            >>> 6
            >>> 8
1:"for n, elem in lst():"::False
2:"for n, elem in enumerate(lst,  0):"::True
3:"for elem in lst"::False
4:"for n, elem in enumerate(lst, 2)"::False

[ForLoopMystry3]
statement:  Which is the correct answer to the MYSTERY LINE below?
            >>> my_dict = {1:'a', 2:'b', 3:'c'}
            >>> MYSTERY LINE 
            >>>     print k, v
            >>> 1 a
            >>> 2 b
            >>> 3 c
1:"for (k,v) in my_dict.items():"::True
2:[(k, v) in my_dict.iteritems()]::False
3:"for k, v in my_dict.iteritems():"::True
4:"for k in my_dict.keys():"::False
5:k, v in my_dict.items()::False 

[ForLoopMystry4]
statement:  What is the ouptput from this Python code?
            >>> for i in range(10):
            >>>    if i < 3:  
            >>>        continue
            >>>    print i
            >>>    if i > 5:
            >>>        break
1:3 4 5 6::True
2:3 4 5::False
3:[3, 4, 5]::False
4:[3, 4, 5, 6]::False
5:1 2 4::False

[ListComprehension]
statement:  What is the ouptput of the following?
            >>> sum([i**(i%2) for i in range(50) if (i%2) == 0])
1:25::True
2:5**5::False
3:27::False
4:24::False
5:49::False 

[ListComprehension2]
statement:  What is the ouptput of the following?
            >>> [i**(i%2) for i in range(5) if (i%2) == 1]
1:[1, 3]::True
2:[1, 1, 3, 9]::False
3:[1, 1, 1, 1, 1, 1, 3, 9, 27, 81]::False
4:(1, 3)::False
5:None of the above::False

[ListComprehension3]
statement:  What is the ouptput of the following?
            >>> print [[i,j] for i in range(3) for j in range(i)]
1:This produces an error::False
2:[[1, 0], [2, 0], [2, 1]]::True
3:[[0, 0], [1, 0], [2, 0]]::False
4:[[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]]::False
5:[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]::False

























