[ValidLists] 
statement:  Which of the following are legitimate Python lists?
1:['at', 'the', ['library']]~~True
2:('at', 'the', 'library')~~False
3:[1250, 3412, 6225, 4525]~~True
4:{'a', 'b', 'c', 'd'}~~False
5:['a', 'b', 'c', 'd']~~True 

[AccessListVariable]
statement:  Let lst = [[4,2], [['a', ['answer']], 3, 4]]",
	    How do you access the answer variable in this lst?"
1:lst[1[0]]~~False
2:lst[1[0[1]]]~~False
3:lst[1][0][1]~~True
4:[1][0][1]~~False
5:lst(1(0(1)))~~False

[ValidListOperations]
statement:  Assume x = ['a', 'b'] and y = ['c', 'd', 'e']
	    Which operations are allowed in Python?
	    [x+y, x-y, x*y, x**y, x/y, x//y, x%y]
1:all the above~~False
2:only x+y~~True
3:x+y and x*y~~False
4:only x*y~~False
5:None of the above~~False

[ValidStringOperations]
statement:  x = 'hello' and y = 'world'
	    Which operations are allowed in Python?
	    [x+y, x-y, x*y, x**y, x/y, x//y, x%y]
1:none of the above~~False
2:only x*y~~False
3:only x+y~~True
4:all the above~~False
5:x+y, x-y and x//y~~False

[AccessListVariable2]
statement:Let lst = ['a', ['c', [42, ['answer'], 'b']]]
        Which of the following correctly accesses the answer?
1:lst(1)(2)(1)(1)~~False
2:lst[1][2][1][1]~~False
3:lst(1)(1)(1)(0)~~False
4:lst[2][0][0][1]~~False
5:lst[1][1][1][0]~~True


[listSlicing]
statement:Let lst=['a', 'b', 'c', 'd']
        Which of the following commands would print the list backwards?
1:lst[-1:0:-1]~~False
2:lst[1:0:1]~~False
3:lst[-1::-1]~~True
4:lst[3::1]~~False
5:lst[3::-1]~~False
